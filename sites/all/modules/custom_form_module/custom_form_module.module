<?php

function custom_form_module_block_info()
{
    $blocks['custom_form_module'] = array(
        'info'  => t('Custom forms'),
        'cache' => DRUPAL_CACHE_PER_ROLE, // по умолчанию
    );

    return $blocks;
}

/*
В этом хуке мы описываем используемые блоки. У нас он будет только один и называться 'custom_form_module'. 'info' — это краткая информация о блоке, а 'cache' — правило кеширования. Подробнее см hook_block_info().
Далее описываем hook_menu():
*/


function custom_form_module_menu()
{

    $items = array();

    $items['admin/config/content/custom_form_module'] = array(
        'title'            => 'Custom form module',
        'description'      => 'Configure the forms and its stages.',
        'page callback'    => 'custom_form_list',
        'access arguments' => array('administer site configuration'),
    );
    $items['admin/config/content/custom_form_module/list'] = array(
        'title'  => 'Custom form list',
        'type'   => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
    );

    // custom form add form
    $items['admin/config/content/custom_form_module/add'] = array(
        'title'            => 'Add custom form',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('custom_form_module_form'),
        'access arguments' => array('administer site configuration'),
        'type'             => MENU_LOCAL_TASK,
        'weight'           => 2,
    );

    // custom form edit form
    $items['admin/config/content/custom_form_module/%form/edit'] = array(
        'title'            => 'Edit custom form',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('custom_form_module_form', 4),
        'access arguments' => array('administer site configuration'),
        'type'             => MENU_CALLBACK,
    );

    // rss delete
    $items['admin/config/content/custom_form_module/%form/delete'] = array(
        'title'            => 'Delete custom form',
        'page callback'    => 'custom_form_module_delete',
        'page arguments'   => array(4),
        'access arguments' => array('administer site configuration'),
        'type'             => MENU_CALLBACK,
    );

    $items['custom_form_module'] = array(
        'title'            => 'Custom form page',
        'page callback'    => 'custom_form_module_page',
        'access arguments' => array('access content'),
    );

    $items['custom_form_module/%form/items'] = array(
        'title'            => 'Custom form content',
        'page callback'    => 'custom_form_content',
        'page arguments'   => array(1),
        'access callback'  => TRUE,
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
    );


    return $items;
}

/*
В items мы задаем URL, его заголовок (title), описание (description), функция обработки (page callback), передаваемые аргументы (page arguments), параметры доступа (access arguments), тип (type) и «вес» (weight). Хотелось бы выделить page callback — drupal_get_from. Эта функция принимает в качестве параметра форму и выводит ее. В «page arguments => array(1)», в качестве аргумента мы передаем 1-ый элемент URL (отсчет идет от 0).

Подробнее о hook_menu().

Далее мы опишем форму, через которую мы будем добавлять и редактировать наши RSS-ленты:
*/

function custom_form_module_form($form, &$form_state, $your_form = null)
{
    $form['form_name'] = array(
        '#title'         => t('Custom form name.'),
        '#description'   => t('Name your custom form'),
        '#type'          => 'textfield',
        '#default_value' => $your_form ? $your_form['form_name'] : '',
        '#required'      => true,
    );

    $form['submit'] = array(
        '#type'  => 'submit',
        '#value' => $your_form ? t('Save') : t('Add'),
    );

    if ($your_form) {
        $form['id'] = array(
            '#type'  => 'value',
            '#value' => $your_form['form_id'],
        );
    }

    return $form;
}

/*
Как Вы видите, если мы будем передавать в форму параметр $rss, форма будет понимать, добавляем мы новую ленту, или редактируем существующую. Функция t() (translate), позволяет локализировать модуль (об этом я расскажу чуть позже). Подробнее о hook_form().
Далее необходимо описать hook_form_validate(), который будет обрабатывать данные, введенные в форму:
*/

function custom_form_module_form_validate($form, &$form_state)
{
   /* $url = $form_state['values']['url'];

    if (fopen($url, "r")) {
        libxml_use_internal_errors(true);
        $rss_feed = simplexml_load_file($url);
        if (empty($rss_feed)) {
            form_set_error('url', t('URL is invalid!'));
        }
    } else {
        form_set_error('url', t('URL is invalid!'));
    }*/
}

/*
Сначала мы получаем данные из $form_state, а потом их обрабатываем. Если что-то не так — выкидывается стандартный form_set_error(), в котором мы указываем имя поля формы и сообщение.
Когда форма проходит валидацию, вызывается hook_form_submit():
*/

function custom_form_module_form_submit($form, &$form_state)
{
    $form = array(
        'form_name'       => $form_state['values']['form_name'],
        'created_at' => time(),
        'updated_at' => time(),
    );

    // save edit data
    if (isset($form_state['values']['form_id'])) {
        $form['form_id'] = $form_state['values']['form_id'];
        drupal_write_record('custom_form', $form, 'form_id');
        drupal_set_message(t('Custom form saved!'));
    } // add new data
    else {
        drupal_write_record('custom_form', $rss);
        drupal_set_message(t('Custom form added!'));
    }

    drupal_goto('admin/config/content/custom_form_module');
}

/*
Думаю тут все понятно. drupal_write_record() делает запись в БД, drupal_set_message() показывает системное сообщение, drupal_goto() перекидывает на заданный URL.
Для того чтобы форма принимала не просто ID ленты ($rss), а ее данные, нужно определить hook_load():
*/

function custom_form_load($id)
{
    $form = db_select('custom_form', 'n')
        ->fields('n', array('form_id', 'form_name', 'created_at', 'updated_at'))
        ->condition('n.form_id', $id)
        ->execute()->fetchAssoc();

    return $form;
}

/*
Теперь в качестве $rss в форму будет передаваться не число, а объект с данными.
Далее следует реализовать функцию вывода страницы, на которой мы сможем проводить редактирование нашей таблицы RSS лент - rss_list():
*/

function custom_form_list()
{
    $header = array(
        array('data' => t('Name')),
        array('data' => t('URL')),
        array('data' => t('Actions'))
    );
    $forms = db_select('custom_form', 'n')
        ->fields('n', array('form_id', 'form_name'))
        ->execute()->fetchAll();

    if ($forms) {
        foreach ($forms as $item) {
            $actions = array(
                l(t('edit'), 'admin/config/content/custom_form_module/' . $item->form_id . '/edit'),
                l(t('delete'), 'admin/config/content/custom_form_module/' . $item->form_id . '/delete'),
            );

            $row [] = array(
                array('data' => $item->form_name),
                array('data' => implode(' | ', $actions)),
            );
        }
    }

    return theme('table', array(
        'header' => $header,
        'rows'   => $row,
    ));
}

/*
Функция l() (link) — создает ссылку. Но главная функция — theme(). С ней Вы познакомитесь отдельно, т.к. она очень обширная и имеет множество полезных параметров.
Ниже создадим функцию удаления записей custom_form_module_delete(): 
*/

function custom_form_module_delete($form)
{
    $rss_deleted = db_delete('custom_form')
        ->condition('form_id', $form['form_id'])
        ->execute();
    drupal_set_message(t('Custom from deleted!'));
    drupal_goto('admin/config/content/custom_form_module');
}

/*
Без комментариев.
Для удобства в дальнейшем я добавил функцию, которая будет возвращать данные, в зависимости от параметра (блок или страница). Вот ее содержимое:
*/

function custom_form_contents($display)
{
    $query = db_select('custom_form', 'n')
        ->fields('n', array('form_id', 'form_name'))
        ->orderBy('form_name', 'DESC');

    if ($display == 'block') {
        $query->range(0, 5);
    }

    return $query->execute();
}

/*
Если в качестве параметра мы укажем 'block', то нам выведет лишь 5 записей.
Далее реализуем хук вывода блока — hook_block_view():
*/

function custom_form_module_block_view($delta = '')
{
    $blocks = array();
    switch ($delta) {
        case 'custom_form_module':
            $select = db_select('custom_form', 'tc');
            $select->addField('tc', 'form_name');

            $entries = $select->execute()->fetchAll();

            $blocks['subject'] = t('List of custom form');
            $blocks['content'] = theme('custom_form_block', array('urls' => $entries));
    }

    return $blocks;
}

/*
Данный блок будет доступен в панели администрирования.
Теперь напишем функцию отображения страницы, на которой будет список лент, при нажатии на которые, будет выводиться контент (в новой вкладке):
*/

function _custom_form_module_page()
{
    drupal_set_title(t('Custom form constructor'));

    $result = custom_form_contents('page')->fetchAll();

    if (!$result) {
        $page_array['custom_form_module_arguments'] = array(
            '#title'  => t('Custom form page'),
            '#markup' => t('No custom forms available'),
        );

        return $page_array;
    } else {
        $page_array = theme('custom_form_page', array('urls' => $result));

        return $page_array;
    }
}

/*
… и страницу отображения контента: 
*/

function custom_form_content($form)
{
    if (!empty($form)) {
        drupal_set_title($form->form_name);
        $page_array = theme('custom_form_content', array('items' => $form));

        return $page_array;
    } else {
        $page_array['custom_form_module_arguments'] = array(
            '#title'  => t('Custom form display'),
            '#markup' => t('Form is not available.'),
        );

        return $page_array;
    }
}

/*
Возможно Вы заметили, но страницы не будут выводиться. Я указал в функции theme() параметр 'custom_form_block' и 'custom_form_content'. Это созданные мной шаблоны. Сделаем hook_theme() для их инициализации:
*/

function custom_form_module_theme()
{
    return array(
        'custom_form_block'   => array(
            'variables' => array(
                'urls' => NULL
            ),
            'template'  => 'custom-form-block',
        ),
        'custom_form_page'    => array(
            'variables' => array(
                'urls' => NULL
            ),
            'template'  => 'custom-form-page',
        ),
        'custom_form_content' => array(
            'variables' => array(
                'items' => NULL
            ),
            'template'  => 'custom-form-content',
        )
    );
}